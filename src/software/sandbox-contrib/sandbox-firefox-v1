#!/bin/execlineb -s0
# __ This sandbox is not fully sealed! Read the script before executing it. __
#
multisubstitute
{
	# `CMD` (i.e netsurf-gtk3) may differ from `NAME` (i.e netsurf).
	#
	define		CMD			firefox
	define		NAME			firefox
	define -s	OPTION			""

	# `PREFIX` is the DBUS-prefix that `CMD` has full ownership of.
	#
	define		PREFIX			org.mozilla.firefox

	# Import referenced environment variables.
	#
	importas -i	HOST_DBUS		DBUS_SESSION_BUS_ADDRESS
	importas -i	XDG_CACHE_HOME		XDG_CACHE_HOME
	importas -i	XDG_CONFIG_HOME		XDG_CONFIG_HOME
	importas -i	XDG_DOWNLOAD_DIR	XDG_DOWNLOAD_DIR
	importas -i	XDG_RUNTIME_DIR		XDG_RUNTIME_DIR
}

multisubstitute
{
	# DENY some /dev files.
	# Webcam access denial, via `/dev/video[0-9]*`, may need more entries.
	#
	define deny_dev /dev/snd:/dev/v4l:/dev/video0:/dev/video1:/dev/video2

	# DENY package-manager files.
	#
	define deny_pkg /etc/portage

	# DENY sensitive files.
	#
	define deny_private /boot:/mnt:${XDG_DOCUMENTS_DIR}

	# DENY some /var files.
	#
	define deny_var /var/db:/var/lib:/var/log:/var/spool

	# WRITE cache files.
	#
	define write_cache ${XDG_CACHE_HOME}/${NAME}:${XDG_CONFIG_HOME}/${NAME}

	# Write dbus request.
	#
	define write_dbus ${XDG_RUNTIME_DIR}/bus.${NAME}

	# WRITE download files.
	#
	define write_dl ${XDG_DOWNLOAD_DIR}/${NAME}

	# WRITE temporary files.
	#
	define write_tmpdir ${XDG_RUNTIME_DIR}/${NAME}
}

export DBUS_SESSION_BUS_ADDRESS $write_dbus
export NAMESPACE_IPC_ENABLE yes
export NAMESPACE_MNT_ENABLE yes
export NAMESPACE_PID_ENABLE yes
export SANDBOX_DENY  ${deny_dev}:${deny_pkg}:${deny_private}:${deny_var}
export SANDBOX_WRITE ${write_cache}:${write_dbus}:${write_dl}:${write_tmpdir}
export TMPDIR $write_tmpdir

fdreserve 1
importas READY_FD FD0

background
{
	xdg-dbus-proxy --fd=${READY_FD} $HOST_DBUS $write_dbus
	--filter
	--broadcast=org.freedesktop.portal.*=@/org/freedesktop/portal/*
	--call=org.freedesktop.portal.*=*
	--own=${PREFIX}.*
	--talk=ca.desrt.dconf
	--talk=org.pipewire.node
}

foreground
{
	# Block until xdg-dbus-proxy is ready.
	#
	fdmove $READY_FD 0
	forstdin -x0 _ true
}

foreground
{
	mkdir -p $write_dl $write_tmpdir
}

foreground
{
	sandbox -- $CMD $OPTION $@
}

# Sandboxing is done. Perform cleanup.
#
fdclose $READY_FD
